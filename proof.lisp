(defun unify (x y &optional theta)
  (cond ((eql theta 'fail) 'fail)
        ((eql x y) theta)
        ((varp x) (unify-var x y theta))
        ((varp y) (unify-var y x theta))
        ((and (consp x) (consp y))
         (unify (cdr x) (cdr y) (unify (car x) (car y) theta)))
        (t 'fail)))

(defun unify-var (var x theta)
  (let ((vb (assoc var theta))
        (xb (assoc x theta)))
    (cond (vb (unify (cdr vb) x theta))
          (xb (unify var (cdr xb) theta))
          ((occurs-p var x theta) 'fail)
          (t (cons (cons var x) theta)))))

(defun occurs-p (var x theta)
  (cond ((eql var x) t)
        ((and (varp x) (assoc x theta))
         (occurs-p var (cdr (assoc x theta)) theta))
        ((consp x) (or (occurs-p var (car x) theta)
                       (occurs-p var (cdr x) theta)))
        (t nil)))
